@page "/create"
@page "/edit/{userId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IToastService toastService

<h1>@Title User</h1>
<hr />

<EditForm Model="@user" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="FirstName" class="form-label">First Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.FirstName" />
        </div>
        <ValidationMessage For="@(() => user.FirstName)" />
    </div>
    <div class="mb-3">
        <label for="LastName" class="form-label">Last Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.LastName" />
        </div>
        <ValidationMessage For="@(() => user.LastName)" />
    </div>
    <div class="mb-3">
        <label for="MobileNumber" class="form-label">Mobile Number</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.MobileNumber" />
        </div>
        <ValidationMessage For="@(() => user.MobileNumber)" />
    </div>
    <div class="mb-3">
        <label for="Email" class="form-label">E-mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Email" />
        </div>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int userId { get; set; }
    protected string Title = "Add";
    protected UserDto user = new()
        {
            FirstName = string.Empty,
            LastName = string.Empty,
            MobileNumber = string.Empty,
            Email = string.Empty,
        };

    protected override async Task OnParametersSetAsync()
    {
        if (userId != 0)
        {
            Title = "Edit";
            try
            {
                OperationResult<UserDto> result = await Http.GetFromJsonAsync<OperationResult<UserDto>>("/api/User/" + Convert.ToInt32(userId)) ?? new();
                if (result.ResponseCode == ResponseCode.Successful)
                {
                    user = result.Data!;
                }
                else
                {
                    toastService.ShowWarning(result.Message);
                }
            }
            catch (HttpRequestException ex)
            {
                var result = ex.Data;
                toastService.ShowError("Unable to fetch data");
            }
        }
    }

    protected async Task SaveUser()
    {
        if (user.UserID != null && user.UserID != 0)
        {
            await Http.PutAsJsonAsync("api/User", user);
        }
        else
        {
            await Http.PostAsJsonAsync("api/User", user);
        }
        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

}
